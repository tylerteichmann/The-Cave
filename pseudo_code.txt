"""
Program				P1_Teichmann.py
Author(s)			Tyler Teichmann
Data Last Updated		Jan 30, 2024

Problem Statement:
	Move the Hero through the Cave, discovering the environment (mapping the Walls as you go. Avoiding the Pit and Monster while trying to find the Treasure.

Customer Requirements:
- The Cave (20x20 squares) is generated randomly (Hero, Walls, Pit, Monster, and Treasure)
- The Hero has a Flashlight that shines one (1) square in all directions (N, S, E, and W)
- The Hero has a spear that can be trhown once in one(1) direction for two(2) squares
- Attacking with the Spear wil Kill the Monster (if in range)
- The Monster will Kill the Hero (if one(1) square away)
- The Pit will Kill the Hero (if they are both in the same square)
- The Hero hears the Wind coming from the Pit (if one(1) square away... can not tell the direction)
- The Hero hears the Snarling from the Monster (if two(2) squares away... can tell the direction)
- Finding the Treasure will win the game (if the Hero is in the same square)

Requirements Analysis:
- The cave will need to represent the cave object with a complex data structure (such as a two dimentsional grid each "square" must contain information about that "square")
- the solution will require a user interation at the begining of each turn.
- The results of turn need to be stored/updated in the cave data structure as well as some "overall game data structure"

Algorithm Design / Pseudocode

1. Read title screen file in, print line by line to display title screen

2. wait for user input (start, controls, exit)
	if exit
		end program, return 1
	if controls
		read control file in, print, line by line
	if start
		begin main program

3. Generate a cave 2D List with 400 tiles class objects attributes (location) (20x20) with a child class of Wall (subclass) or Tile

	Generate Cave (20x20) with tile objects ('1' - '400'?)

	Generate outside wall
		iterate along the top [0][0-19]
			relpace tile with wall
		iterate along the bottom [19][0-19]
			relpace tile with wall
		iterate along the left side [1-18][0]
			relpace tile with wall
		iterate along the right [1-18][19]
			relpace tile with wall

	Generate inside walls
		TODO

	Generate Monster
		generate random location
			Cannot have value [0][x], [19][x], [y][0], [y][19]
		check location in the cave array
			if wall
				generate new number
			else
				cave[y][x] = 'Monster' with element as location attributes

	Generate Treasure 
		generate random location
			Cannot have value [0][x], [19][x], [y][0], [y][19] or Monster [+-3][+-3]
		check location in the cave array
			if wall
				generate new number
			else
				cave[y][x] = 'Treasure' with element as location attributes

	Generate Pit 
		generate random location
			Cannot have value [0][x], [19][x], [y][0], [y][19] or Monster [+-3][+-3] or Treasure [+-2][+-2]
		check location in the cave array
			if wall
				generate new number
			else
				cave[y][x] = 'Pit' with element as location attributes
	
	Generate Hero 
		limit 1 
		Cannot have value [0][x], [19][x], [y][0], [y][19] or Monster [+-3][+-3] or Treasure [+-2][+-2] or Pit[+-2][+-2]
		attribuetes = location, surroundings
		methods 
			Move(direction)
			Look()
				return Wall, Treasure, Pit
			Attack(direction)
			hear
				return, wind, monster, or clinking

4. Check Hero location, and set direction attributes 

	check surroundings and set direction and direction + 1 to the object at that location
	check the cave array location [+1][0]
		N = Nothing, Wall, Treasure, or Pit
	check the cave array location [+2][0]
		N + 1= Nothing, Wall, Treasure, or Pit
	check the cave array location [-1][0]
		S = Nothing, Wall, Treasure, or Pit
	check the cave array location [-2][0]
		S + 1= Nothing, Wall, Treasure, or Pit
	check the cave array location [0][-1]
		W = Nothing, Wall, Treasure, or Pit
	check the cave array location [0][-2]
		W + 1= Nothing, Wall, Treasure, or Pit
	check the cave array location [0][+1]
		E = Nothing, Wall, Treasure, or Pit
	check the cave array location [0][+2]
		E + 1 = Nothing, Wall, Treasure, or Pit

	if Direction or direction + 1 == Monster
		Death

5. Wait for user input (Look, Move [Direction], Attack [Direction], Hear)

	if Look
		Return "You shine you flashlight to the North, you see _____."
			check value of N
			if Nothing
				"nothing of signifigance"
			if Wall
				"a massive wall that seems to extend to the heavens"
			if Treasure
				"the Treasure"
			if Pit
				"a deep pit. You try to look in but see only darkness"
		Return "You shine you flashlight to the South, you see _____."
			check value of N
			if Nothing
				"nothing of signifigance"
			if Wall
				"a massive wall that seems to extend to the heavens"
			if Treasure
				"the Treasure"
			if Pit
				"a deep pit. You try to look in but see only darkness"
		Return "You shine you flashlight to the East, you see _____."
			check value of N
			if Nothing
				"nothing of signifigance"
			if Wall
				"a massive wall that seems to extend to the heavens"
			if Treasure
				"the Treasure"
			if Pit
				"a deep pit. You try to look in but see only darkness"
		Return "You shine you flashlight to the West, you see _____."
			check value of N
			if Nothing
				"nothing of signifigance"
			if Wall
				"a massive wall that seems to extend to the heavens"
			if Treasure
				"the Treasure"
			if Pit
				"a deep pit. You try to look in but see only darkness"
		
	if Hear
		if N, S, E, W or N, S, E, W + 1 == Monster
			return "You hear a Snarling noise, but can't tell where its coming from."
		if N, S, E, W or N, S, E, W + 1 == Pit
			return "You can hear a faint wind, perhapse indicateing some deep void."
		if N, S, E, W or N, S, E, W + 1 == Treasure
			return "You can hear a clinking of coins, a great treasure is nearby."

	if Attack (Direction)
		if Direction == Monster,
			Monster == Tile
			"The beast is slain"
		elif Direction + 1 == Monster
			Monster == Tile
			"The beast is slain"
		else
			"the spear disappears into the void and clanks on the ground off in the distance."

	if Move (Direction)

		Check if hero location + Direction == Treasure location
			win game

		Check if hero location + Direction == pit location
			death

6. Move Monster 1 space toward hero //optional

7. Check Surroundings

8. Wait for user input (Look, Move [Direction], Attack [Direction], Hear)